#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void bfs(int x, int y, vector<vector<char>> &map, vector<vector<bool>> &visited) {
    int n = map.size(), m = map[0].size();
    queue<pair<int, int>> q;
    q.push({x, y});
    visited[x][y] = true;

    while (!q.empty()) {
        auto [cx, cy] = q.front();
        q.pop();

        for (auto [dx, dy] : vector<pair<int, int>>{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}) {
            int nx = cx + dx, ny = cy + dy;
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && map[nx][ny] == '.' && !visited[nx][ny]) {
                visited[nx][ny] = true;
                q.push({nx, ny});
            }
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<char>> map(n, vector<char>(m));
    vector<vector<bool>> visited(n, vector<bool>(m, false));

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> map[i][j];
        }
    }

    int rooms = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (map[i][j] == '.' && !visited[i][j]) {
                rooms++;
                bfs(i, j, map, visited);
            }
        }
    }

    cout << rooms << endl;
    return 0;
}
