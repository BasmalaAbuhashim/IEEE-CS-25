#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct Cell {
    int x, y;
};

bool isValid(int x, int y, int n, int m, vector<vector<char>> &labyrinth, vector<vector<bool>> &visited) {
    return x >= 0 && x < n && y >= 0 && y < m && labyrinth[x][y] != '#' && !visited[x][y];
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<char>> labyrinth(n, vector<char>(m));
    vector<vector<bool>> visited(n, vector<bool>(m, false));
    vector<vector<pair<int, int>>> parent(n, vector<pair<int, int>>(m, {-1, -1}));

    pair<int, int> start, end;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> labyrinth[i][j];
            if (labyrinth[i][j] == 'A') start = {i, j};
            if (labyrinth[i][j] == 'B') end = {i, j};
        }
    }

    queue<Cell> q;
    q.push({start.first, start.second});
    visited[start.first][start.second] = true;

    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};
    char moves[] = {'U', 'D', 'L', 'R'};

    bool found = false;

    while (!q.empty()) {
        Cell current = q.front();
        q.pop();

        if (current.x == end.first && current.y == end.second) {
            found = true;
            break;
        }

        for (int i = 0; i < 4; i++) {
            int nx = current.x + dx[i];
            int ny = current.y + dy[i];

            if (isValid(nx, ny, n, m, labyrinth, visited)) {
                visited[nx][ny] = true;
                q.push({nx, ny});
                parent[nx][ny] = {current.x, current.y};
            }
        }
    }

    if (!found) {
        cout << "NO" << endl;
        return 0;
    }
    string path;
    pair<int, int> cur = end;

    while (cur != start) {
        pair<int, int> par = parent[cur.first][cur.second];
        for (int i = 0; i < 4; i++) {
            if (par.first + dx[i] == cur.first && par.second + dy[i] == cur.second) {
                path += moves[i];
                break;
            }
        }
        cur = par;
    }

    reverse(path.begin(), path.end());

    cout << "YES" << endl;
    cout << path.length() << endl;
    cout << path << endl;

    return 0;
}
